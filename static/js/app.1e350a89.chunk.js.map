{"version":3,"sources":["src/components/TextInput.tsx","src/screens/LoginScreen.tsx","src/navigation/AppNavigator.tsx","src/store/login/types.ts","src/store/login/reducers.ts","src/store/reducers.ts","src/store/login/actions.ts","src/store/login/sagas.ts","src/store/sagas.ts","src/store/index.ts","src/index.tsx","App.tsx"],"names":["styles","StyleSheet","create","container","width","marginVertical","input","backgroundColor","DefaultTheme","colors","surface","error","fontSize","color","paddingHorizontal","paddingTop","memo","errorText","props","View","style","selectionColor","primary","underlineColor","mode","Text","LoginScreen","onLogin","auth","navigation","useState","email","setEmail","password","setPassword","Card","testID","title","subtitle","card","onChangeText","text","accessibilityLabel","placeholder","value","label","keyboardType","FAB","onPress","animated","fab","icon","justifyContent","alignItems","marginTop","navigate","fab2","flex","Dimensions","get","marginLeft","padding","borderRadius","height","textField","marginBottom","margin","Stack","createStackNavigator","AppNavigator","NavigationContainer","Navigator","Screen","name","component","options","headerShown","ActionTypes","initialState","isLoggedIn","id","username","reducers","login","state","action","type","LOGIN_REQUEST","LOGIN_LOADING_ENDED","LOGIN_RESPONSE","response","LOGIN_FAILED","LOG_OUT","onLoginResponse","disableLoader","LOGIN_DISABLE_LOADER","loginAsync","put","LOGIN_ENABLE_LOADER","success","data","message","setTimeout","Alert","alert","all","takeLatest","rootSaga","config","key","storage","AsyncStorage","blacklist","debug","middleware","sagaMiddleware","createSagaMiddleware","push","persistCombineReducers","rootReducer","enhancers","applyMiddleware","persistConfig","store","createStore","undefined","compose","persistor","persistStore","run","enableScreens","theme","roundness","accent","background","paper","App","isReady","setIsReady","useEffect","Font","Ionicons","font","then","AppLoading"],"mappings":"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","file":"static/js/app.1e350a89.chunk.js","sourcesContent":["import React, { memo } from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nimport { DefaultTheme, TextInput as Input } from 'react-native-paper'\n\ntype Props = React.ComponentProps<typeof Input> & { errorText?: string }\n\nconst TextInput = ({ errorText, ...props }: Props) => (\n  <View style={styles.container}>\n    <Input\n      style={styles.input}\n      selectionColor={DefaultTheme.colors.primary}\n      underlineColor=\"transparent\"\n      mode=\"outlined\"\n      {...props}\n    />\n    {errorText ? <Text style={styles.error}>{errorText}</Text> : null}\n  </View>\n)\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    marginVertical: 12,\n  },\n  input: {\n    backgroundColor: DefaultTheme.colors.surface,\n  },\n  error: {\n    fontSize: 14,\n    color: DefaultTheme.colors.error,\n    paddingHorizontal: 4,\n    paddingTop: 4,\n  },\n})\n\nexport default memo(TextInput)\n","import React, { useState } from 'react'\nimport { Dimensions, StyleSheet, Text, TouchableOpacity, View } from 'react-native'\nimport { Card, FAB } from 'react-native-paper'\n\nimport TextInput from '@/components/TextInput'\n\ninterface Props {\n  onLogin: (auth: { email: string; password: string }) => void\n  // auth: IAuthState\n  navigation?: any\n}\n\nexport const LoginScreen = ({ onLogin, auth, navigation }: Props) => {\n  // const email = useInput('')\n  // const password = useInput('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  const onLoginPressed = () => {\n    onLogin({\n      email,\n      password,\n    })\n  }\n\n  return (\n    <View style={styles.container}>\n      <Card testID=\"login\" title=\"\" subtitle=\"\" style={styles.card}>\n        <TextInput\n          onChangeText={(text) => setEmail(text)}\n          accessibilityLabel=\"이메일\"\n          placeholder=\"이메일\"\n          value={email}\n          label=\"이메일\"\n        />\n        <TextInput\n          onChangeText={(text) => setPassword(text)}\n          accessibilityLabel=\"암호\"\n          placeholder=\"암호\"\n          keyboardType=\"default\"\n          value={password}\n          label=\"암호\"\n        />\n\n        {auth && auth.error && <Text style={{ color: 'red' }}>{auth.error}</Text>}\n        <FAB\n          onPress={onLoginPressed}\n          label=\"Login\"\n          animated={true}\n          style={styles.fab}\n          testID=\"login_button\"\n          icon={'login-variant'}\n        />\n      </Card>\n      <View\n        style={{\n          justifyContent: 'flex-end',\n          alignItems: 'flex-end',\n          marginTop: 100,\n        }}\n      >\n        <FAB\n          onPress={() => navigation.navigate('SignUp')}\n          label={'Register'}\n          animated={true}\n          style={styles.fab2}\n          color={'#fff'}\n          icon={'account-arrow-right'}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n  },\n  card: {\n    width: Dimensions.get('window').width - 100,\n    marginLeft: 25,\n    marginTop: 200,\n    padding: 10,\n    // height: (Dimensions.get('window').height / 3),\n    borderRadius: 10,\n    height: 300,\n  },\n  textField: {\n    marginBottom: 30,\n  },\n  title: {\n    fontSize: 30,\n    marginBottom: 30,\n  },\n  fab: {\n    margin: 16,\n  },\n  fab2: {\n    backgroundColor: '#A38AEE',\n  },\n})\n// const mapStateToProps = (state: IStore) => ({\n//   auth: state.auth,\n// })\n// const mapDispatchToProps = {\n//   onLogin: signInAction,\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(LoginScreen)\n","// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\n// import { BottomTabBarProps } from '@react-navigation/bottom-tabs/src/types'\n// import { createDrawerNavigator } from '@react-navigation/drawer'\nimport { NavigationContainer, RouteProp } from '@react-navigation/native'\nimport { createStackNavigator, StackNavigationProp } from '@react-navigation/stack'\nimport React from 'react'\n\nimport { LoginScreen } from '@/screens/LoginScreen'\n\nconst Stack = createStackNavigator()\nexport function AppNavigator() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"LoginScreen\" component={LoginScreen} options={{ headerShown: false }} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n","export enum ActionTypes {\n  LOGIN_ENABLE_LOADER = 'LOGIN_ENABLE_LOADER',\n  LOGIN_DISABLE_LOADER = 'LOGIN_DISABLE_LOADER',\n  LOGIN_REQUEST = 'LOGIN_REQUEST',\n  LOGIN_RESPONSE = 'LOGIN_RESPONSE',\n  LOGIN_LOADING_ENDED = 'LOGIN_LOADING_ENDED',\n  LOGIN_FAILED = 'LOGIN_FAILED',\n  LOG_OUT = 'LOG_OUT',\n}\n\nexport interface ILoginResponse {\n  id: number\n}\n\nexport interface ILoginRequestState {\n  type: string\n  username: string\n  password: string\n}\n\ninterface IResponse {\n  id: number\n}\n\nexport interface ILoginResponseState {\n  type: string\n  response: IResponse\n}\n\nexport interface ILoginState {\n  isLoggedIn: boolean\n  id: number\n  username: string\n  password: string\n}\n","import { ActionTypes, ILoginRequestState, ILoginResponseState, ILoginState } from './types'\n\nconst initialState: ILoginState = {\n  isLoggedIn: false,\n  id: 0,\n  username: '',\n  password: '',\n}\n\nconst reducer = (state: ILoginState = initialState, action: ILoginRequestState) => {\n  switch (action.type) {\n    case ActionTypes.LOGIN_REQUEST:\n      return {\n        ...state,\n        username: action.username,\n        password: action.password,\n      }\n    case ActionTypes.LOGIN_LOADING_ENDED:\n      return { ...state }\n    case ActionTypes.LOGIN_RESPONSE:\n      return {\n        ...state,\n        id: action.response.id,\n        isLoggedIn: true,\n      }\n    case ActionTypes.LOGIN_FAILED:\n      return {\n        ...state,\n        isLoggedIn: false,\n      }\n    case ActionTypes.LOG_OUT:\n      return {\n        ...state,\n        isLoggedIn: false,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import login from './login/reducers'\n\nconst reducers = {\n  login,\n}\n\nexport type IReduxState = typeof reducers\n\nexport default reducers\n","import { ActionTypes, ILoginResponse } from './types'\n\nexport function requestLogin(username: string, password: string) {\n  return {\n    type: ActionTypes.LOGIN_REQUEST,\n    username,\n    password,\n  }\n}\n\nexport function loginFailed() {\n  return {\n    type: ActionTypes.LOGIN_FAILED,\n  }\n}\n\nexport function onLoginResponse(response: ILoginResponse) {\n  return {\n    type: ActionTypes.LOGIN_RESPONSE,\n    response,\n  }\n}\n\nexport function enableLoader() {\n  return {\n    type: ActionTypes.LOGIN_ENABLE_LOADER,\n  }\n}\n\nexport function disableLoader() {\n  return {\n    type: ActionTypes.LOGIN_DISABLE_LOADER,\n  }\n}\n\nexport function logOut() {\n  return {\n    type: ActionTypes.LOG_OUT,\n  }\n}\n","import { Alert } from 'react-native'\n\nimport { all, takeLatest } from 'redux-saga/effects'\nimport { put } from 'redux-saga/effects'\nimport { disableLoader, enableLoader, loginFailed, onLoginResponse } from './actions'\nimport { ActionTypes } from './types'\n\n// import loginUser from '@/services/loginUser';\n\nfunction* loginAsync() {\n  yield put(enableLoader())\n\n  // const response = yield call(loginUser, action.username, action.password);\n  // mock response\n  const response = { success: true, data: { id: 1 }, message: 'Success' }\n\n  if (response.success) {\n    yield put(onLoginResponse(response.data))\n    yield put(disableLoader())\n\n    // yield call(navigationActions.navigateToHome);\n  } else {\n    yield put(loginFailed())\n    yield put(disableLoader())\n    setTimeout(() => {\n      Alert.alert('BoilerPlate', response.message)\n    }, 200)\n  }\n}\n\nexport default all([takeLatest(ActionTypes.LOGIN_REQUEST, loginAsync)])\n","import { all } from 'redux-saga/effects'\nimport login from './login/sagas'\n\nexport default function* rootSaga() {\n  return yield all([login])\n}\n","import AsyncStorage from '@react-native-community/async-storage'\n\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport { persistCombineReducers, persistStore } from 'redux-persist'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\n\nconst config = {\n  key: 'root',\n  storage: AsyncStorage,\n  blacklist: ['loadingReducer'],\n  debug: true,\n}\n\nconst middleware = []\nconst sagaMiddleware = createSagaMiddleware()\n\nmiddleware.push(sagaMiddleware)\n\nif (__DEV__) {\n  middleware.push(createLogger())\n}\n\nconst reducers = persistCombineReducers(config, rootReducer)\nconst enhancers = [applyMiddleware(...middleware)]\nconst persistConfig: any = { enhancers }\nconst store = createStore(reducers, undefined, compose(...enhancers))\nconst persistor = persistStore(store, persistConfig)\n\nsagaMiddleware.run(rootSaga)\n\nexport { persistor, store }\n","import React, { useEffect, useState } from 'react'\nimport 'react-native-gesture-handler'\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper'\nimport { SafeAreaProvider } from 'react-native-safe-area-context'\nimport { enableScreens } from 'react-native-screens'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { AppNavigator } from '@/navigation'\nimport { persistor, store } from '@/store'\nimport { Ionicons } from '@expo/vector-icons'\nimport { AppLoading } from 'expo'\nimport * as Font from 'expo-font'\n\nenableScreens()\n\nconst theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#0084ff',\n    accent: '#f1c40f',\n    background: '#f9f9f9',\n    paper: 'white',\n  },\n}\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false)\n\n  useEffect(() => {\n    Font.loadAsync({\n      ...Ionicons.font,\n    }).then(() => setIsReady(true))\n  }, [])\n\n  if (!isReady) {\n    return <AppLoading />\n  }\n\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <SafeAreaProvider>\n          <PaperProvider theme={theme}>\n            <AppNavigator />\n          </PaperProvider>\n        </SafeAreaProvider>\n      </PersistGate>\n    </Provider>\n  )\n}\n\nexport default App\n","import App from './src'\n\nexport default App\n"],"sourceRoot":""}